---
// src/components/Hero.astro
import { t } from "../i18n/index.js";

// Obtener el idioma inicial
const initialLang =
    typeof window !== "undefined"
        ? localStorage.getItem("preferredLang") || "es"
        : "es";
---

<section
    class="relative flex flex-col items-center justify-center min-h-screen text-center text-white overflow-hidden bg-gradient-to-br from-black via-gray-900 to-green-900/30"
    id="hero"
>
    <!-- Canvas del efecto Matrix mejorado -->
    <canvas
        id="matrixCanvas"
        class="absolute top-0 left-0 w-full h-full opacity-40"></canvas>

    <!-- Overlay de gradiente para mejor legibilidad -->
    <div
        class="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-black/60 z-0"
    >
    </div>

    <!-- Contenido principal mejorado -->
    <div
        class="relative z-10 flex flex-col items-center space-y-6 px-4 max-w-4xl mx-auto"
    >
        <!-- Avatar con efecto hover -->
        <div class="relative group">
            <img
                src="/imgs/avatar.png"
                alt="Jorge Peña"
                class="w-32 h-32 md:w-50 md:h-50 rounded-lg border-4 border-[#E64530] shadow-2xl transition-all duration-500 group-hover:scale-110 group-hover:border-[#e66f5f] group-hover:shadow-[#E64530]/80"
            />
            <!-- Efecto de pulso alrededor del avatar -->
            <div
                class="absolute inset-0 border-4 border-[#E64530] animate-ping opacity-20 group-hover:opacity-30"
            >
            </div>
        </div>

        <!-- Texto principal -->
        <div class="space-y-4">
            <h1 class="text-4xl md:text-5xl lg:text-7xl font-bold">
                <span
                    class="text-transparent bg-clip-text bg-gradient-to-r from-[#E64530] to-[#91564e] drop-shadow-2xl"
                >
                    Jorge E. Peña Paz (Jelp200)
                </span>
            </h1>

            <div class="space-y-2">
                <p
                    class="text-xl md:text-2xl lg:text-4xl text-white font-light"
                    data-i18n="hero.title"
                >
                    {t(initialLang, "hero.title")}
                </p>
                <p
                    class="text-lg md:text-xl text-gray-500 max-w-2xl mx-auto leading-relaxed"
                    data-i18n="hero.subtitle"
                >
                    {t(initialLang, "hero.subtitle")}
                </p>
            </div>
        </div>

        <!-- Botones de acción -->
        <div class="flex flex-col sm:flex-row gap-4 mt-6">
            <a
                href="#contact"
                class="bg-[#E64530] hover:bg-[#91564e] text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-[#E64530]/25 border-2 border-[#E64530] hover:border-[#91564e] flex items-center justify-center gap-2"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                >
                    <path
                        d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"
                    ></path>
                    <path
                        d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"
                    ></path>
                </svg>
                <span data-i18n="hero.contact_button">
                    {t(initialLang, "hero.contact_button")}
                </span>
            </a>

            <a
                href="#projects"
                class="border-2 border-[#E64530] text-[#E64530] hover:bg-[#E64530] hover:text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-[#E64530]/25 flex items-center justify-center gap-2"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                >
                    <path
                        fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z"
                        clip-rule="evenodd"></path>
                </svg>
                <span data-i18n="hero.projects_button">
                    {t(initialLang, "hero.projects_button")}
                </span>
            </a>
        </div>

        <!-- Indicador de scroll -->
        <a
            href="#about"
            class="mt-12 animate-bounce text-[#E64530] hover:text-[#91564e] transition-colors duration-300 group"
        >
            <div class="flex flex-col items-center space-y-2">
                <span
                    class="text-sm text-gray-500 group-hover:text-gray-500 transition-colors duration-300"
                    data-i18n="hero.scroll_hint"
                >
                    {t(initialLang, "hero.scroll_hint")}
                </span>
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-8 w-8 group-hover:scale-110 transition-transform duration-300"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 9l-7 7-7-7"></path>
                </svg>
            </div>
        </a>
    </div>

    <!-- Script del efecto Matrix mejorado -->
    <script>
        // Configuración del efecto Matrix
        class MatrixEffect {
            constructor(canvas) {
                this.canvas = canvas;
                this.ctx = canvas.getContext("2d");
                this.letters =
                    "010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$#@%&*()[]{}<>?/|\\=+-_DIANA";
                this.fontSize = 14;
                this.columns = 0;
                this.drops = [];
                this.animationId = null;

                this.init();
                this.setupEventListeners();
            }

            init() {
                this.resize();
                this.start();
            }

            resize() {
                this.canvas.width = window.innerWidth;
                this.canvas.height = window.innerHeight;
                this.columns = Math.floor(this.canvas.width / this.fontSize);
                this.drops = Array(this.columns)
                    .fill()
                    .map((_, i) =>
                        Math.floor(
                            (Math.random() * -this.canvas.height) /
                                this.fontSize,
                        ),
                    );
            }

            draw() {
                // Fondo con transparencia para el efecto de rastro
                this.ctx.fillStyle = "rgba(0, 0, 0, 0.04)";
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

                // Configurar estilo del texto
                this.ctx.fillStyle = "#E64530";
                this.ctx.font = `${this.fontSize}px 'Courier New', monospace`;

                // Dibujar caracteres
                for (let i = 0; i < this.drops.length; i++) {
                    const text = this.letters.charAt(
                        Math.floor(Math.random() * this.letters.length),
                    );

                    const x = i * this.fontSize;
                    const y = this.drops[i] * this.fontSize;

                    // Efecto de gradiente en los caracteres
                    if (y > 0 && y < this.canvas.height) {
                        const opacity = Math.min(
                            1,
                            (this.canvas.height - y) / this.canvas.height,
                        );
                        this.ctx.fillStyle = `rgba(230, 69, 48, ${opacity})`;
                        this.ctx.fillText(text, x, y);
                    }

                    // Reiniciar gota cuando llega al fondo
                    if (y > this.canvas.height && Math.random() > 0.975) {
                        this.drops[i] = 0;
                    }

                    this.drops[i]++;
                }

                this.animationId = requestAnimationFrame(() => this.draw());
            }

            start() {
                if (!this.animationId) {
                    this.draw();
                }
            }

            stop() {
                if (this.animationId) {
                    cancelAnimationFrame(this.animationId);
                    this.animationId = null;
                }
            }

            setupEventListeners() {
                window.addEventListener("resize", () => {
                    this.resize();
                });
            }
        }

        // Inicializar efecto Matrix cuando el componente se monta
        document.addEventListener("DOMContentLoaded", () => {
            const canvas = document.getElementById("matrixCanvas");
            if (canvas) {
                new MatrixEffect(canvas);
            }
        });

        // Sistema de internacionalización para el Hero
        function updateHeroTexts(lang) {
            const elements = document.querySelectorAll("[data-i18n]");
            const translations = {
                es: {
                    "hero.title":
                        "Desarrollador/Diseñador de Software y Hardware",
                    "hero.subtitle":
                        "Creando soluciones innovadoras en la intersección del software y hardware",
                    "hero.contact_button": "Contáctame",
                    "hero.projects_button": "Ver Proyectos",
                    "hero.scroll_hint": "Desplázate para descubrir",
                },
                en: {
                    "hero.title": "Software and Hardware Developer/Designer",
                    "hero.subtitle":
                        "Creating innovative solutions at the intersection of software and hardware",
                    "hero.contact_button": "Contact Me",
                    "hero.projects_button": "View Projects",
                    "hero.scroll_hint": "Scroll to discover",
                },
                zh: {
                    "hero.title": "软件和硬件开发人员/设计师",
                    "hero.subtitle": "在软件和硬件的交叉点创造创新解决方案",
                    "hero.contact_button": "联系我",
                    "hero.projects_button": "查看项目",
                    "hero.scroll_hint": "滚动发现",
                },
            };

            elements.forEach((element) => {
                const key = element.getAttribute("data-i18n");
                if (translations[lang] && translations[lang][key]) {
                    element.textContent = translations[lang][key];
                }
            });
        }

        // Escuchar cambios de idioma
        window.addEventListener("languageChanged", (e) => {
            updateHeroTexts(e.detail.language);
        });

        // Inicializar textos con el idioma actual
        const currentLang = localStorage.getItem("preferredLang") || "es";
        updateHeroTexts(currentLang);
    </script>
</section>

<style>
    /* Animaciones personalizadas */
    @keyframes float {
        0%,
        100% {
            transform: translateY(0px);
        }
        50% {
            transform: translateY(-10px);
        }
    }

    .group:hover .group-hover\:float {
        animation: float 3s ease-in-out infinite;
    }

    /* Mejoras de rendimiento para el canvas */
    #matrixCanvas {
        image-rendering: -moz-crisp-edges;
        image-rendering: -webkit-crisp-edges;
        image-rendering: pixelated;
        image-rendering: crisp-edges;
    }

    /* Efectos de texto mejorados */
    .text-glow {
        text-shadow: 0 0 10px currentColor;
    }
</style>
